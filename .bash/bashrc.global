# == ENVIRONMENT ======================================================

export EDITOR=vim
export GREP_COLOR="1;33"

shopt -s checkwinsize

# let autocomplete work with sudo
complete -cf sudo

# ---- History --------------------------------------------------------

shopt -s histappend
export PROMPT_COMMAND="history -a; history -n"
export HISTCONTROL=erasedups
export HISTFILE=$HOME/.bash/history
export HISTSIZE=50000
export HISTIGNORE='&:ls:cd ~:cd ..:[bf]g:exit:h:history'

# ---- Window Title ---------------------------------------------------

# Sets title to the current working directory, abbreviated similarly to
# Vim tabs, eg: '/home/aj/foo/bar/baz' => '~/f/b/baz'
pwd_abbr () {
    echo -ne "\ek$(pwd | sed s#$HOME#~# | sed 's#\([^/]\)[^/]*/#\1/#g')\e\\"
}
export PROMPT_COMMAND="$PROMPT_COMMAND; pwd_abbr;"

# ---- Shell Prompt ---------------------------------------------------

# Functions to tell me whether I am in a git or svn working copy, + which branch
parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git::\1)/'
}
parse_hg_branch() {
  hg summary 2> /dev/null | grep ^branch | sed -e 's/.*: \(.*\)/(hg::\1)/'
}
parse_svn_branch() {
  parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk -F / '{print "(svn::"$1 "/" $2 ")"}'
}
parse_svn_url() {
  svn info 2>/dev/null | grep -e '^URL*' | sed -e 's#^URL: *\(.*\)#\1#g '
}
parse_svn_repository_root() {
  svn info 2>/dev/null | grep -e '^Repository Root:*' | sed -e 's#^Repository Root: *\(.*\)#\1\/#g '
}

# The prompt itself
if [ $TERM = 'dumb' ] ; then
    # No color, no unicode (eg, Vim shell)
    export PS1="\[\033[G\]\w \$(parse_git_branch)\$(parse_hg_branch)\$(parse_svn_branch) > "
elif [ $TERM = 'mrxvt' ] ; then
    # Mrxvt supports color, but not unicode.
    export PS1="\[\033[G\]\[\033[01;34m\]\w \[\033[32m\]\$(parse_git_branch)\$(parse_hg_branch)\$(parse_svn_branch)\[\033[00m\] > "
else
    # Default: Full-color, Unicode
    export PS1="\[\033[01;34m\]\w \[\033[32m\]\$(parse_git_branch)\$(parse_hg_branch)\$(parse_svn_branch)\[\033[00m\] âž¤ "
fi

# == ALIASES ==========================================================

# ---- Alternatives ---------------------------------------------------

test -x /usr/bin/colordiff && alias diff='colordiff'
test -x /usr/bin/most && alias less='most'
alias vi='vim'

# ---- Preferred Default Options --------------------------------------

alias df='df -h'
alias grep='grep --color=auto'
alias mkdir='mkdir -p'
alias mv='mv -vi'
alias rm='rm -v'
alias vlc='vlc --extraintf http'

# ---- Shortcuts  -----------------------------------------------------

# ls
alias ls='ls -F --color=auto'            # a couple good defaults
alias l='ls -F --color=auto'             # 50% less typing!
alias ll='ls -Fhl --color=auto'          # long list
alias la='ls -AFh --color=auto'          # list all
alias lla='ls -AFl --color=auto'         # long list all
alias lr='ls -FR --color=auto'           # list recursive
alias llr='ls -FlR --color=auto'         # long list recursive
alias lx='ls -lXB --color=auto'          # sort by extension
alias lm='ls -Fl --color=always | most'  # pipe to most, with color

# cd
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

alias otf2ttf="fontforge -script $HOME/bin/otf2ttf.sh"

# Follow copied and moved files to destination directory (courtesy jwr)
follow() { [ -d "$1" ] && cd "$1" || cd "$(dirname "$1")"; }
cpf() { cp "$@" && follow "$_"; }
mvf() { mv "$@" && follow "$_"; }

# Make one or more directories, and cd to the last one in the list
mkcd() { mkdir -p "$@" && cd "$_"; }

# Easily hide/unhide files (via dot-prefix)
hide() {
    for f in "$@"; do
        mv -i "$f" $(dirname "$f")/".$(basename "$f")"
    done
}
unhide() {
    for f in "$@"; do
        mv -i "$f" $(dirname "$f")/"$(basename "$f" | sed 's/^\.//')"
    done
}

function xt() {
  # xt = eXTract, a wrapper to extract many different archive formats
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1     ;;
      *.tar.gz)    tar xvzf $1     ;;
      *.bz2)       bunzip2 $1      ;;
      *.rar)       unrar x $1      ;;
      *.gz)        gunzip $1       ;;
      *.tar)       tar xvf $1      ;;
      *.tbz2)      tar xvjf $1     ;;
      *.tgz)       tar xvzf $1     ;;
      *.zip)       unzip $1        ;;
      *.Z)         uncompress $1   ;;
      *.7z)        7z x $1         ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

