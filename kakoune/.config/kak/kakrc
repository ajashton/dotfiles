## EDITING ##

set-option global indentwidth 4
set-option global tabstop 4

set-option global ui_options
set-option -add global ui_options terminal_assistant=clippy
set-option -add global ui_options terminal_padding_char=·
set-option -add global ui_options terminal_set_title=false

map global normal <c-/> ': comment-line<ret>'
map global insert <s-backspace> '<backspace>'

# Completion with tab
hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}


## FILE MANAGEMENT / NAVIGATION ##

define-command RM %{
    # Delete the file of the current buffer
    nop %sh{ rm "$kak_buffile" }
    # Delete the current buffer, discarding unsaved changes
    delete-buffer!
    # Exit kakoune (unless there are other unsaved buffers)
    quit
}

# Switch buffers
map global goto b "<esc>: buffer-next<ret>" -docstring "next buffer"
map global goto B "<esc>: buffer-previous<ret>" -docstring "previous buffer"


## VISUAL ##

# display line numbers
#add-highlighter global/ number-lines -hlcursor

# Highlight search results
set-face global search +biu
add-highlighter global/search dynregex '%reg{/}' 0:search

# Highlight matching parens/braces/etc
add-highlighter global/ show-matching

# column guides
add-highlighter global/ column 80 default,rgb:080808
add-highlighter global/ column 100 default,rgb:080808
add-highlighter global/ column 120 default,rgb:080808

# highlight NOTE/TODO/FIXME
add-highlighter global/ regex \b(NOTE)\b 0:default+rb
add-highlighter global/ regex \b(TODO|IMPORTANT)\b 0:black,yellow+bf
add-highlighter global/ regex \b(FIXME|XXX)\b 0:white,red+bf

# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# soft wrap long lines
add-highlighter global/ wrap -word -indent

# show git changes
hook global WinCreate .* %{ evaluate-commands %sh{
    is_work_tree=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --is-inside-work-tree 2>/dev/null)
    [ "${is_work_tree}" = "true" ] && \
        printf "%s\n" "git show-diff
            hook global BufWritePost %val{buffile} %{git update-diff}
            hook global BufReload %val{buffile} %{git update-diff}
            hook global WinDisplay %val{buffile} %{git update-diff}
            hook global NormalIdle %val{buffile} %{git update-diff}
            hook global InsertIdle %val{buffile} %{git update-diff}"
}}


## REGISTERS ##

# when the contents of the default register change
# copy them to the system clipboard as well
hook global RegisterModified '"' %{ nop %sh{
    printf %s "$kak_main_reg_dquote" | xclip -in -selection clipboard<ret>
}}


## LINTING & FORMATTING ##

# hook global WinSetOption filetype=python %{
#     # set lint command to run both mypy and pylint, and operate
#     # on the *actual* file, not the tmp file created by lint.kak.
#     set-option window lintcmd 'pylint --score=n $kak_buffile'
# }

hook global WinSetOption filetype=sh %{
    set-option window lintcmd 'shellcheck --format=gcc'
}

hook global WinSetOption filetype=(python|sh) %{
    # lint immediately when loading a file
    lint-buffer
    # lint after writing a file
    hook buffer BufWritePost .* %{
        lint-buffer
    }
}

hook global WinSetOption filetype=rust %{
    set-option window formatcmd rustfmt
    hook -group rust-auto-format window BufWritePre .* format
    #lsp-enable-window
    #lsp-signature-help-enable
    hook global WinSetOption filetype=(?!rust).* %{
        remove-hooks window rust-auto-format
    }
}


## PLUGINS ##

# plug.kak - plugin manager
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# kak-lsp - language server
plug "kak-lsp/kak-lsp" do %{
    cargo install --locked --force --path .
    mkdir -p ~/.config/kak-lsp
    cp -n kak-lsp.toml ~/.config/kak-lsp/
} config %{
    hook global WinSetOption filetype=(c|cpp|javascript|json|python|rust|sh|yaml) %{
        lsp-enable-window
        #lsp-auto-hover-enable
        #lsp-auto-hover-insert-mode-disable

        set-option window lsp_diagnostic_line_error_sign "!"
        set-option window lsp_diagnostic_line_warning_sign "?"

        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor true

        set-face window DiagnosticError default+u
        set-face window DiagnosticWarning default+u

        map window normal <F1> ': lsp-hover<ret>'
        map window normal <F2> ': lsp-rename-prompt<ret>'
        map window normal <F3> ': lsp-highlight-references<ret>'
        map window normal <F12> ': lsp-definition<ret>'
        map window normal <s-F12> ': lsp-references<ret>'
    }
}

# fzf.kak
plug "andreyorst/fzf.kak" config %{
    map global normal <c-p> ': fzf-mode<ret>'
} defer fzf-file %{
    set-option global fzf_file_command 'rg --files --hidden -g "!.git/*"'
}

plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

# auto-pairs.kak
# plug "alexherbo2/auto-pairs.kak" config % {
#     set-option global auto_pairs ( ) '{' '}' [ ] '"' '"' "'" "'" ` ` “ ” ‘ ’ « » ‹ ›
#     enable-auto-pairs
# }

# smarttab.kak
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
} config %{
    hook global BufCreate .* %{
        editorconfig-load
        set-option buffer aligntab false
        autoconfigtab
    }
    # # expandtab: always insert spaces
    # hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl) expandtab
    # # noexpandtab: always insert tabs
    # hook global WinSetOption filetype=(makefile|gas) noexpandtab
    # # smarttab: tabs for indentation, spaces for alignment
    # hook global WinSetOption filetype=(c|cpp) smarttab
}
